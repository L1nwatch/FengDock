name: Build and Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: l1nwatch/fengdock

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          curl -Ls https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --group dev

      - name: Install Playwright browsers
        run: uv run playwright install chromium

      - name: Run pytest
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: uv run python -m pytest

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          port: ${{ secrets.DEPLOY_PORT }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            PASSWORD="${{ secrets.PRIVATE_PAGE_PASSWORD }}"
            set -euo pipefail
            if [ -n "$PASSWORD" ]; then
              HASH=$(printf '%s' "$PASSWORD" | sha256sum | awk '{print $1}')
              export PRIVATE_PAGE_PASSWORD_HASH="$HASH"
            fi
            cd ${{ secrets.DEPLOY_PATH }}
            git fetch --all --prune
            git reset --hard origin/main
            docker compose pull
            docker compose up -d --remove-orphans
            docker compose exec caddy caddy reload --config /etc/caddy/Caddyfile || docker compose up -d --force-recreate caddy
            docker image prune -f
